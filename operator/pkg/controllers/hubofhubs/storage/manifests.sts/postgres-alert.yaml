{{- if .EnablePostgresMetrics }}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: prometheus-postgres-exporter
  namespace: {{.Namespace}}
  labels:
    app: prometheus-postgres-exporter
    global-hub.open-cluster-management.io/metrics-resource: postgres
spec:
  groups:
    - name: prometheus-postgres-exporter
      rules: 
        - alert: PostgreSQLMaxConnectionsReached
          annotations:
            description: '{{ `{{ $labels.server }}` }} is exceeding the currently configured
              maximum Postgres connection limit (current value: {{ `{{ $value }}` }}). Services
              may be degraded - please take immediate action (you probably need to increase
              max_connections in the Docker image and re-deploy.'
            summary: '{{ `{{ $labels.server }}` }} has maxed out Postgres connections.'
          expr: sum by (server) (pg_stat_activity_count) >= sum by (server) (pg_settings_max_connections)
            - sum by (server) (pg_settings_superuser_reserved_connections)
          for: 5m
          labels:
            severity: critical
            service: postgresql
        - alert: PGExporterScrapeError
          expr: pg_exporter_last_scrape_error > 0
          for: 60s
          labels:
            service: postgresql
            severity: critical
          annotations:
            summary: 'Postgres Exporter running on {{ `{{ $labels.job }}` }} (instance: {{ `{{ $labels.instance }}` }}) is encountering scrape errors processing queries. Error count: ( {{ `{{ $value }}` }} )'
        - alert: PGIsUp
          expr: pg_up < 1
          for: 60s
          labels:
            service: postgresql
            severity: critical
          annotations:
            summary: 'postgres_exporter running on {{ `{{ $labels.job }}` }} is unable to communicate with the configured database'
        - alert: PostgresqlTooManyConnections
          expr: sum by (instance, job, server) (pg_stat_activity_count) > min by (instance, job, server) (pg_settings_max_connections * 0.8)
          for: 2m
          labels:
            severity: warning
            service: postgresql
          annotations:
            summary: Postgresql too many connections (instance {{ `{{ $labels.instance }}` }})
            description: "PostgreSQL instance has too many connections (> 80%).\n  VALUE = {{ `{{ $value }}` }}\n  LABELS = {{ `{{ $labels }}` }}"
        - alert: PostgresqlDeadLocks
          expr: increase(pg_stat_database_deadlocks{datname!~"template.*|postgres"}[1m]) > 5
          for: 0m
          labels:
            severity: warning
            service: postgresql
          annotations:
            summary: Postgresql dead locks (instance {{ `{{ $labels.instance }}` }})
            description: "PostgreSQL has dead-locks\n  VALUE = {{ `{{ $value }}` }}\n  LABELS = {{ `{{ $labels }}` }}"
        - alert: PostgresqlHighRollbackRate
          expr: sum by (namespace,datname) ((rate(pg_stat_database_xact_rollback{datname!~"template.*|postgres",datid!="0"}[3m])) / ((rate(pg_stat_database_xact_rollback{datname!~"template.*|postgres",datid!="0"}[3m])) + (rate(pg_stat_database_xact_commit{datname!~"template.*|postgres",datid!="0"}[3m])))) > 0.02
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: Postgresql high rollback rate (instance {{ `{{ $labels.instance }}` }})
            description: "Ratio of transactions being aborted compared to committed is > 2 %\n  VALUE = {{ `{{ $value }}` }}\n  LABELS = {{ `{{ $labels }}` }}"
        - alert: PostgresqlLowXidConsumption
          expr: rate(pg_txid_current[1m]) < 5
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Postgresql low XID consumption (instance {{ `{{ $labels.instance }}` }})
            description: "Postgresql seems to be consuming transaction IDs very slowly\n  VALUE = {{ `{{ $value }}` }}\n  LABELS = {{ `{{ $labels }}` }}"
        - alert: PostgresqlHighRateStatementTimeout
          expr: rate(postgresql_errors_total{type="statement_timeout"}[1m]) > 3
          for: 0m
          labels:
            severity: critical
          annotations:
            summary: Postgresql high rate statement timeout (instance {{ `{{ $labels.instance }}` }})
            description: "Postgres transactions showing high rate of statement timeouts\n  VALUE = {{ `{{ $value }}` }}\n  LABELS = {{ `{{ $labels }}` }}"
        - alert: PostgresqlTooManyDeadTuples
          expr: ((pg_stat_user_tables_n_dead_tup > 10000) / (pg_stat_user_tables_n_live_tup + pg_stat_user_tables_n_dead_tup)) >= 0.1
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Postgresql too many dead tuples (instance {{ `{{ $labels.instance }}` }})
            description: "PostgreSQL dead tuples is too large\n  VALUE = {{ `{{ $value }}` }}\n  LABELS = {{ `{{ $labels }}` }}"
        - alert: PostgresqlBloatTableHigh(>80%)
          expr: pg_bloat_table_bloat_pct > 80 and on (relname) (pg_bloat_table_real_size > 200000000)
          for: 1h
          labels:
            severity: warning
          annotations:
            summary: Postgresql bloat table high (> 80%) (instance {{ `{{ $labels.instance }}` }})
            description: "The table {{ `{{ $labels.relname }}` }} is bloated. You should execute `VACUUM {{ `{{ $labels.relname }}` }};`\n  VALUE = {{ `{{ $value }}` }}\n  LABELS = {{ `{{ $labels }}` }}"
        - alert: PostgresqlTooManyLocksAcquired
          expr: ((sum (pg_locks_count)) / (pg_settings_max_locks_per_transaction * pg_settings_max_connections)) > 0.20
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Postgresql too many locks acquired (instance {{ `{{ $labels.instance }}` }})
            description: "Too many locks acquired on the database. If this alert happens frequently, we may need to increase the postgres setting max_locks_per_transaction.\n  VALUE = {{ `{{ $value }}` }}\n  LABELS = {{ `{{ $labels }}` }}"
{{- end }}