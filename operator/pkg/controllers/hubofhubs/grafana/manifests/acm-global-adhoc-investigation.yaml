apiVersion: v1
data:
  acm-global-adhoc-investigation.json: |
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "datasource",
              "uid": "grafana"
            },
            "enable": false,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 10,
      "links": [
        {
          "asDropdown": false,
          "icon": "dashboard",
          "includeVars": true,
          "keepTime": false,
          "tags": [],
          "targetBlank": true,
          "title": "Global Hub - What's Changed / Policies",
          "tooltip": "",
          "type": "link",
          "url": "d/5a3a577af7894943aa6e7ca8408502fa/global-hub-whats-changed-policies?orgId=1"
        }
      ],
      "liveNow": false,
      "panels": [
        {
          "collapsed": false,
          "datasource": {
            "type": "postgres",
            "uid": "P244538DD76A4C61D"
          },
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 59,
          "panels": [],
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P244538DD76A4C61D"
              },
              "refId": "A"
            }
          ],
          "title": "Cluster Status (impacted by selected filters)",
          "type": "row"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P244538DD76A4C61D"
          },
          "description": "The distinct number of managed clusters that were \"non compliant\" in the given time interval. The managed clusters are calculated by cluster id and not by the cluster name; therefore, if a cluster with the same name exist across two different hubs, it is counted as two distinct managed clusters.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "links": [
                {
                  "targetBlank": true,
                  "title": "View offending clusters for policy  \"${policy}\" on hub cluster \"${hub}\"",
                  "url": "${hubConsoleURL}/multicloud/governance/policies/details/${namespace}/${policy}/results?perspective=acm"
                }
              ],
              "mappings": [],
              "noValue": "0",
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "red",
                    "value": null
                  }
                ]
              },
              "unitScale": true
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 4,
            "x": 0,
            "y": 1
          },
          "id": 42,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "/^count$/",
              "values": false
            },
            "showPercentChange": false,
            "text": {},
            "textMode": "auto",
            "wideLayout": true
          },
          "pluginVersion": "10.3.3",
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P244538DD76A4C61D"
              },
              "editorMode": "code",
              "format": "table",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "WITH data AS (\n  SELECT\n    $__timeGroupAlias(ch.compliance_date, $__interval),\n    mc.cluster_id,\n    COUNT(CASE WHEN compliance = 'non_compliant' THEN 1 END) AS \"non_compliant\"\n  FROM\n    history.local_compliance ch\n  JOIN\n    local_spec.policies p ON ch.policy_id = p.policy_id \n  JOIN\n    status.managed_clusters mc ON ch.cluster_id = mc.cluster_id\n  WHERE\n    $__timeFilter(ch.compliance_date)\n  AND\n    ch.leaf_hub_name IN ( $all_hubs )\n  AND \n    mc.leaf_hub_name  IN ( $all_hubs )\n  AND \n    p.leaf_hub_name  IN ( $all_hubs )\n  AND\n    p.policy_id ${policy_id_query:raw}\n  AND\n    p.payload -> 'metadata' ->> 'namespace' = '$namespace'\n  AND\n    p.policy_name = '$policy'\n  AND\n    mc.payload -> 'metadata' -> 'labels' ->> '$label' ${value_query:raw}\n  GROUP BY (ch.compliance_date, mc.cluster_id)\n  ORDER BY (ch.compliance_date) DESC\n),\nres as (\n  SELECT\n    cluster_id,\n    SUM(non_compliant) as \"non_compliant\"\n  FROM\n    data\n  GROUP BY (cluster_id)\n)\nSELECT\n  COUNT(DISTINCT cluster_id)\nFROM\n  res\nWHERE\n  non_compliant > 0",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "value"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "sql": {
                "columns": [
                  {
                    "parameters": [],
                    "type": "function"
                  }
                ],
                "groupBy": [
                  {
                    "property": {
                      "type": "string"
                    },
                    "type": "groupBy"
                  }
                ],
                "limit": 50
              },
              "timeColumn": "time",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Number of Non Compliant Managed Clusters",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "P244538DD76A4C61D"
          },
          "description": "The distinct number of managed clusters that were \"compliant\" in the given time interval. The managed clusters are calculated by cluster id and not by the cluster name; therefore, if a cluster with the same name exist across two different hubs, it is counted as two distinct managed clusters.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "noValue": "0",
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  }
                ]
              },
              "unitScale": true
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 4,
            "x": 4,
            "y": 1
          },
          "id": 48,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showPercentChange": false,
            "text": {},
            "textMode": "auto",
            "wideLayout": true
          },
          "pluginVersion": "10.3.3",
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P244538DD76A4C61D"
              },
              "editorMode": "code",
              "format": "table",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "WITH data AS (\n  SELECT\n    $__timeGroupAlias(ch.compliance_date, $__interval),\n    mc.cluster_id,\n    COUNT(CASE WHEN compliance = 'compliant' THEN 1 END) AS \"compliant\",\n    COUNT(CASE WHEN compliance = 'non_compliant' THEN 1 END) AS \"non_compliant\",\n    COUNT(CASE WHEN compliance = 'pending' THEN 1 END) AS \"pending\",\n    COUNT(CASE WHEN compliance = 'unknown' THEN 1 END) AS \"unknown\"\n  FROM\n    history.local_compliance ch\n  JOIN\n    local_spec.policies p ON ch.policy_id = p.policy_id \n  JOIN\n    status.managed_clusters mc ON ch.cluster_id = mc.cluster_id \n  WHERE\n    $__timeFilter(ch.compliance_date)\n  AND\n    ch.leaf_hub_name IN ( $all_hubs )\n  AND \n    mc.leaf_hub_name  IN ( $all_hubs )\n  AND \n    p.leaf_hub_name  IN ( $all_hubs )\n  AND\n    p.policy_id ${policy_id_query:raw}\n  AND\n    p.payload -> 'metadata' ->> 'namespace' = '$namespace'\n  AND\n    p.policy_name = '$policy'\n  AND\n    mc.payload -> 'metadata' -> 'labels' ->> '$label' ${value_query:raw}\n  GROUP BY (ch.compliance_date, mc.cluster_id)\n  ORDER BY (ch.compliance_date) DESC\n),\nres as (\n  SELECT\n    cluster_id,\n    SUM(compliant) as \"compliant\",\n    SUM(non_compliant) as \"non_compliant\",\n    SUM(pending) as \"pending\",\n    SUM(unknown) as \"unknown\"\n  FROM\n    data\n  GROUP BY (cluster_id)\n)\nSELECT\n  COUNT(DISTINCT cluster_id)\nFROM\n  res\nWHERE\n  compliant > 0\nAND\n  non_compliant = 0\nAND\n  unknown = 0\nAND \n  pending = 0",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "value"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "sql": {
                "columns": [
                  {
                    "parameters": [],
                    "type": "function"
                  }
                ],
                "groupBy": [
                  {
                    "property": {
                      "type": "string"
                    },
                    "type": "groupBy"
                  }
                ],
                "limit": 50
              },
              "timeColumn": "time",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Number of Compliant Managed Clusters",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "P244538DD76A4C61D"
          },
          "description": "The distinct number of managed clusters that were \"pending\" in the given time interval. The managed clusters are calculated by cluster id and not by the cluster name; therefore, if a cluster with the same name exist across two different hubs, it is counted as two distinct managed clusters.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "links": [
                {
                  "targetBlank": true,
                  "title": "View all clusters for policy  \"${policy}\" on hub cluster \"${hub}\"",
                  "url": "${hubConsoleURL}/multicloud/governance/policies/details/${namespace}/${policy}/results?perspective=acm\n"
                }
              ],
              "mappings": [],
              "noValue": "0",
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "orange",
                    "value": null
                  }
                ]
              },
              "unitScale": true
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 4,
            "x": 8,
            "y": 1
          },
          "id": 57,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showPercentChange": false,
            "text": {},
            "textMode": "auto",
            "wideLayout": true
          },
          "pluginVersion": "10.3.3",
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P244538DD76A4C61D"
              },
              "editorMode": "code",
              "format": "table",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "WITH data AS (\n  SELECT\n    $__timeGroupAlias(ch.compliance_date, $__interval),\n    mc.cluster_id,\n    COUNT(CASE WHEN compliance = 'non_compliant' THEN 1 END) AS \"non_compliant\",\n    COUNT(CASE WHEN compliance = 'pending' THEN 1 END) AS \"pending\"\n  FROM\n    history.local_compliance ch\n  JOIN\n    local_spec.policies p ON ch.policy_id = p.policy_id\n  JOIN\n    status.managed_clusters mc ON ch.cluster_id = mc.cluster_id\n  WHERE\n    $__timeFilter(ch.compliance_date)\n  AND\n    ch.leaf_hub_name IN ( $all_hubs )\n  AND \n    mc.leaf_hub_name  IN ( $all_hubs )\n  AND \n    p.leaf_hub_name  IN ( $all_hubs )\n  AND \n    p.policy_id ${policy_id_query:raw}\n  AND\n    p.payload -> 'metadata' ->> 'namespace' = '$namespace'\n  AND\n    p.policy_name = '$policy'\n  AND\n    mc.payload -> 'metadata' -> 'labels' ->> '$label' ${value_query:raw}\n  GROUP BY (ch.compliance_date, mc.cluster_id)\n  ORDER BY (ch.compliance_date) DESC\n),\nres as (\n  SELECT\n    cluster_id,\n    SUM(non_compliant) as \"non_compliant\",\n    SUM(pending) as \"pending\"\n  FROM\n    data\n  GROUP BY (cluster_id)\n)\nSELECT\n  COUNT(DISTINCT cluster_id)\nFROM\n  res\nWHERE\n  pending > 0\nAND\n  non_compliant = 0",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "value"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "sql": {
                "columns": [
                  {
                    "parameters": [],
                    "type": "function"
                  }
                ],
                "groupBy": [
                  {
                    "property": {
                      "type": "string"
                    },
                    "type": "groupBy"
                  }
                ],
                "limit": 50
              },
              "timeColumn": "time",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Number of Pending Managed Clusters",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "P244538DD76A4C61D"
          },
          "description": "The distinct number of managed clusters that were \"unknown\" in the given time interval. The managed clusters are calculated by cluster id and not by the cluster name; therefore, if a cluster with the same name exist across two different hubs, it is counted as two distinct managed clusters.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "links": [
                {
                  "targetBlank": true,
                  "title": "View all clusters for policy  \"${policy}\" on hub cluster \"${hub}\"",
                  "url": "${hubConsoleURL}/multicloud/governance/policies/details/${namespace}/${policy}/results?perspective=acm\n"
                }
              ],
              "mappings": [],
              "noValue": "0",
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "yellow",
                    "value": null
                  }
                ]
              },
              "unitScale": true
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 4,
            "x": 12,
            "y": 1
          },
          "id": 67,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showPercentChange": false,
            "text": {},
            "textMode": "auto",
            "wideLayout": true
          },
          "pluginVersion": "10.3.3",
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P244538DD76A4C61D"
              },
              "editorMode": "code",
              "format": "table",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "WITH data AS (\n  SELECT\n    $__timeGroupAlias(ch.compliance_date, $__interval),\n    mc.cluster_id,\n    COUNT(CASE WHEN compliance = 'non_compliant' THEN 1 END) AS \"non_compliant\",\n    COUNT(CASE WHEN compliance = 'pending' THEN 1 END) AS \"pending\",\n    COUNT(CASE WHEN compliance = 'unknown' THEN 1 END) AS \"unknown\"\n  FROM\n    history.local_compliance ch\n  JOIN\n    local_spec.policies p ON ch.policy_id = p.policy_id\n  JOIN\n    status.managed_clusters mc ON ch.cluster_id = mc.cluster_id\n  WHERE\n    $__timeFilter(ch.compliance_date)\n  AND\n    ch.leaf_hub_name IN ( $all_hubs )\n  AND \n    mc.leaf_hub_name  IN ( $all_hubs )\n  AND \n    p.leaf_hub_name  IN ( $all_hubs )\n  AND \n    p.policy_id ${policy_id_query:raw}\n  AND\n    p.payload -> 'metadata' ->> 'namespace' = '$namespace'\n  AND\n    p.policy_name = '$policy'\n  AND\n    mc.payload -> 'metadata' -> 'labels' ->> '$label' ${value_query:raw}\n  GROUP BY (ch.compliance_date, mc.cluster_id)\n  ORDER BY (ch.compliance_date) DESC\n),\nres as (\n  SELECT\n    cluster_id,\n    SUM(non_compliant) as \"non_compliant\",\n    SUM(pending) as \"pending\",\n    SUM(unknown) as \"unknown\"\n  FROM\n    data\n  GROUP BY (cluster_id)\n)\nSELECT\n  COUNT(DISTINCT cluster_id)\nFROM\n  res\nWHERE\n  unknown > 0\nAND\n  non_compliant = 0\nAND\n  pending = 0",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "value"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "sql": {
                "columns": [
                  {
                    "parameters": [],
                    "type": "function"
                  }
                ],
                "groupBy": [
                  {
                    "property": {
                      "type": "string"
                    },
                    "type": "groupBy"
                  }
                ],
                "limit": 50
              },
              "timeColumn": "time",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Number of Unknown Managed Clusters",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "P244538DD76A4C61D"
          },
          "description": "The distinct number of managed clusters that were in the given time interval. The managed clusters are calculated by cluster id and not by the cluster name; therefore, if a cluster with the same name exist across two different hubs, it is counted as two distinct managed clusters.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "links": [
                {
                  "targetBlank": true,
                  "title": "View all clusters for policy  \"${policy}\" on hub cluster \"${hub}\"",
                  "url": "${hubConsoleURL}/multicloud/governance/policies/details/${namespace}/${policy}/results?perspective=acm\n"
                }
              ],
              "mappings": [],
              "noValue": "0",
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "text",
                    "value": null
                  }
                ]
              },
              "unitScale": true
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 8,
            "x": 16,
            "y": 1
          },
          "id": 47,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "/^count$/",
              "values": false
            },
            "showPercentChange": false,
            "text": {},
            "textMode": "auto",
            "wideLayout": true
          },
          "pluginVersion": "10.3.3",
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P244538DD76A4C61D"
              },
              "editorMode": "code",
              "format": "table",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "WITH data AS (\n  SELECT\n    $__timeGroupAlias(ch.compliance_date, $__interval),\n    mc.cluster_id,\n    COUNT(CASE WHEN compliance = 'compliant' THEN 1 END) AS \"compliant\",\n    COUNT(CASE WHEN compliance = 'non_compliant' THEN 1 END) AS \"non_compliant\",\n    COUNT(CASE WHEN compliance = 'pending' THEN 1 END) AS \"pending\",\n    COUNT(CASE WHEN compliance = 'unknown' THEN 1 END) AS \"unknown\"\n  FROM\n    history.local_compliance ch\n  JOIN\n    local_spec.policies p ON ch.policy_id = p.policy_id \n  JOIN\n    status.managed_clusters mc ON ch.cluster_id = mc.cluster_id \n  WHERE\n    $__timeFilter(ch.compliance_date)\n  AND\n    ch.leaf_hub_name IN ( $all_hubs )\n  AND \n    mc.leaf_hub_name  IN ( $all_hubs )\n  AND \n    p.leaf_hub_name  IN ( $all_hubs )\n  AND\n    p.policy_id ${policy_id_query:raw}\n  AND\n    p.payload -> 'metadata' ->> 'namespace' = '$namespace'\n  AND\n    p.policy_name = '$policy'\n  AND\n    mc.payload -> 'metadata' -> 'labels' ->> '$label' ${value_query:raw}\n  GROUP BY (ch.compliance_date, mc.cluster_id)\n  ORDER BY (ch.compliance_date) DESC\n),\nres as (\n  SELECT\n    cluster_id,\n    SUM(compliant) as \"compliant\",\n    SUM(non_compliant) as \"non_compliant\",\n    SUM(pending) as \"pending\",\n    SUM(unknown) as \"unknown\"\n  FROM\n    data\n  GROUP BY (cluster_id)\n)\nSELECT\n  COUNT(DISTINCT cluster_id)\nFROM\n  res",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "value"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "sql": {
                "columns": [
                  {
                    "parameters": [],
                    "type": "function"
                  }
                ],
                "groupBy": [
                  {
                    "property": {
                      "type": "string"
                    },
                    "type": "groupBy"
                  }
                ],
                "limit": 50
              },
              "timeColumn": "time",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Number of Managed Clusters",
          "type": "stat"
        },
        {
          "collapsed": false,
          "datasource": {
            "type": "postgres",
            "uid": "P244538DD76A4C61D"
          },
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 7
          },
          "id": 61,
          "panels": [],
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P244538DD76A4C61D"
              },
              "refId": "A"
            }
          ],
          "title": "Cluster Status > Non Compliant",
          "type": "row"
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "P244538DD76A4C61D"
          },
          "description": "List of offending managed clusters count for one policy based on non compliant message.(If a policy has multiple templates, only show one failed message)",
          "fieldConfig": {
            "defaults": {
              "color": {
                "fixedColor": "red",
                "mode": "continuous-GrYlRd"
              },
              "custom": {
                "align": "auto",
                "cellOptions": {
                  "type": "auto"
                },
                "filterable": true,
                "inspect": false
              },
              "links": [],
              "mappings": [],
              "noValue": "No data in response",
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "red",
                    "value": null
                  }
                ]
              },
              "unit": "string",
              "unitScale": true
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Policy"
                },
                "properties": [
                  {
                    "id": "custom.width",
                    "value": 156
                  },
                  {
                    "id": "links",
                    "value": [
                      {
                        "targetBlank": true,
                        "title": "View What's Changed dashboard for policy \"${__value.text}\"",
                        "url": "d/5a3a577af7894943aa6e7ca8408502fa/global-hub-whats-changed-policies?orgId=1&from=${__value.time}&var-hub=${hub}&var-namespace=${namespace}&var-policy=${policy}"
                      }
                    ]
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cluster Count"
                },
                "properties": [
                  {
                    "id": "custom.width",
                    "value": 289
                  },
                  {
                    "id": "links",
                    "value": [
                      {
                        "targetBlank": true,
                        "title": "View offending clusters for policy  \"${policy}\" on hub cluster \"${hub}\"",
                        "url": "${hubConsoleURL}/multicloud/governance/policies/details/${namespace}/${policy}/results?perspective=acm"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 9,
            "w": 24,
            "x": 0,
            "y": 8
          },
          "id": 50,
          "options": {
            "cellHeight": "sm",
            "footer": {
              "countRows": false,
              "fields": "",
              "reducer": [
                "sum"
              ],
              "show": false
            },
            "showHeader": true,
            "sortBy": []
          },
          "pluginVersion": "10.3.3",
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P244538DD76A4C61D"
              },
              "editorMode": "code",
              "format": "table",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "WITH eventdata AS (\n   WITH alleventdata AS(\n      SELECT \n        policy_id,\n        cluster_id,\n        leaf_hub_name,\n        message,\n        reason,\n        compliance,\n        ROW_NUMBER() OVER(\n          PARTITION BY policy_id,cluster_id \n          ORDER BY created_at DESC\n          ) row_num\n      FROM\n        event.local_policies\n      WHERE\n        (compliance = 'non_compliant' OR compliance = 'pending')\n      AND \n        policy_id IN (\n          SELECT DISTINCT policy_id \n          FROM local_spec.policies\n          WHERE leaf_hub_name  IN ( $all_hubs ) AND payload -> 'metadata' ->> 'namespace' = '$namespace' AND policy_name = '$policy' AND policy_id ${policy_id_query:raw}\n        )\n    )\n  SELECT * FROM\n  alleventdata\n  WHERE row_num = 1\n),\nmessagedata as(\n  SELECT\n    p.policy_name as \"policy\",\n    replace(message,mc.cluster_name,'<Cluster Name>') as \"groupmessage\",\n    mc.cluster_id,\n    reason\n  FROM\n    history.local_compliance ch\n  JOIN\n    local_spec.policies p ON ch.policy_id = p.policy_id \n  JOIN\n    status.managed_clusters mc ON ch.cluster_id = mc.cluster_id \n  LEFT OUTER JOIN\n    eventdata ed ON ed.policy_id = p.policy_id  AND ed.cluster_id = mc.cluster_id AND ed.compliance = ch.compliance\n  WHERE\n    $__timeFilter(ch.compliance_date)\n  AND\n    ch.leaf_hub_name IN ( $all_hubs )\n  AND \n    mc.leaf_hub_name  IN ( $all_hubs )\n  AND \n    p.leaf_hub_name  IN ( $all_hubs )\n  AND \n    ed.leaf_hub_name  IN ( $all_hubs )\n  AND\n    p.payload -> 'metadata' ->> 'namespace' = '$namespace'\n  AND\n    p.policy_name = '$policy'\n  AND\n    mc.payload -> 'metadata' -> 'labels' ->> '$label' ${value_query:raw}\n  AND\n    (ch.compliance = 'non_compliant' OR ch.compliance = 'pending')\n)\nSELECT \n  policy,\n  groupmessage,\n  COUNT(DISTINCT cluster_id) as \"clustercount\"\nFROM\n  messagedata\nGROUP BY(policy,groupmessage)\nORDER BY clustercount DESC",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "value"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "sql": {
                "columns": [
                  {
                    "parameters": [],
                    "type": "function"
                  }
                ],
                "groupBy": [
                  {
                    "property": {
                      "type": "string"
                    },
                    "type": "groupBy"
                  }
                ],
                "limit": 50
              },
              "timeColumn": "time",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Offending Clusters (Group By Message)",
          "transformations": [
            {
              "id": "organize",
              "options": {
                "excludeByName": {},
                "indexByName": {
                  "cloud": 3,
                  "cluster": 2,
                  "policy": 1,
                  "time": 0
                },
                "renameByName": {
                  "chdate": "Time",
                  "cloud": "Cloud",
                  "cluster": "Cluster",
                  "clustercount": "Cluster Count",
                  "groupmessage": "Group Message",
                  "message": "Latest Message",
                  "policy": "Policy",
                  "reason": "Reason",
                  "time": "Time"
                }
              }
            }
          ],
          "type": "table"
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "P244538DD76A4C61D"
          },
          "description": "List of offending managed clusters(If a policy has multiple templates, only show one failed message)",
          "fieldConfig": {
            "defaults": {
              "color": {
                "fixedColor": "red",
                "mode": "continuous-GrYlRd"
              },
              "custom": {
                "align": "auto",
                "cellOptions": {
                  "type": "auto"
                },
                "filterable": true,
                "inspect": false
              },
              "links": [],
              "mappings": [],
              "noValue": "No data in response",
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "red",
                    "value": null
                  }
                ]
              },
              "unit": "string",
              "unitScale": true
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cluster"
                },
                "properties": [
                  {
                    "id": "links",
                    "value": [
                      {
                        "targetBlank": true,
                        "title": "View What's Changed dashboard for cluster \"${__value.text}\"",
                        "url": "d/5a3a577af7894943aa6e7ca8408502fb/global-hub-whats-changed-clusters?orgId=1&var-hub=${hub}&var-policy=${policy}&${hub}&var-cluster=${__value.text}&var-namespace=${namespace}"
                      }
                    ]
                  },
                  {
                    "id": "custom.width",
                    "value": 186
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Status"
                },
                "properties": [
                  {
                    "id": "custom.cellOptions",
                    "value": {
                      "mode": "gradient",
                      "type": "color-background"
                    }
                  },
                  {
                    "id": "custom.width",
                    "value": 143
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Time"
                },
                "properties": [
                  {
                    "id": "custom.width",
                    "value": 241
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Policy"
                },
                "properties": [
                  {
                    "id": "custom.width",
                    "value": 156
                  },
                  {
                    "id": "links",
                    "value": [
                      {
                        "targetBlank": true,
                        "title": "View What's Changed dashboard for policy \"${__value.text}\"",
                        "url": "d/5a3a577af7894943aa6e7ca8408502fa/global-hub-whats-changed-policies?orgId=1&var-hub=${hub}&var-namespace=${namespace}&var-policy=${policy}&var-cluster=${__data.fields.Cluster}"
                      }
                    ]
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cloud"
                },
                "properties": [
                  {
                    "id": "custom.width",
                    "value": 123
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Reason"
                },
                "properties": [
                  {
                    "id": "custom.width",
                    "value": 182
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 9,
            "w": 24,
            "x": 0,
            "y": 17
          },
          "id": 66,
          "options": {
            "cellHeight": "sm",
            "footer": {
              "countRows": false,
              "fields": "",
              "reducer": [
                "sum"
              ],
              "show": false
            },
            "showHeader": true,
            "sortBy": []
          },
          "pluginVersion": "10.3.3",
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P244538DD76A4C61D"
              },
              "editorMode": "code",
              "format": "table",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "WITH eventdata AS (\n   WITH alleventdata AS(\n      SELECT \n        policy_id,\n        cluster_id,\n        leaf_hub_name,\n        message,\n        reason,\n        compliance,\n        ROW_NUMBER() OVER(\n          PARTITION BY policy_id,cluster_id \n          ORDER BY created_at DESC\n          ) row_num\n      FROM\n        event.local_policies\n      WHERE\n        (compliance = 'non_compliant' OR compliance = 'pending')\n      AND \n        policy_id IN (\n          SELECT DISTINCT policy_id \n          FROM local_spec.policies\n          WHERE leaf_hub_name IN ( $all_hubs ) AND payload -> 'metadata' ->> 'namespace' = '$namespace' AND policy_name = '$policy' AND policy_id ${policy_id_query:raw}\n        )\n    )\n  SELECT * FROM\n  alleventdata\n  WHERE row_num = 1\n)\nSELECT\n  ch.compliance_date as \"time\",\n  mc.cluster_name as \"cluster\",\n  p.policy_name as \"policy\",\n  mc.payload -> 'metadata' -> 'labels' ->> '$label' AS \"label\",\n  message,\n  reason\nFROM\n  history.local_compliance ch\nJOIN\n  local_spec.policies p ON ch.policy_id = p.policy_id \nJOIN\n  status.managed_clusters mc ON ch.cluster_id = mc.cluster_id \nLEFT OUTER JOIN\n  eventdata ed ON ed.policy_id = p.policy_id  AND ed.cluster_id = mc.cluster_id AND ed.compliance = ch.compliance\nWHERE\n  $__timeFilter(ch.compliance_date)\nAND\n  ch.leaf_hub_name IN ( $all_hubs )\nAND \n  mc.leaf_hub_name  IN ( $all_hubs )\nAND \n  p.leaf_hub_name  IN ( $all_hubs )\nAND \n  ed.leaf_hub_name  IN ( $all_hubs )\nAND\n  p.payload -> 'metadata' ->> 'namespace' = '$namespace'\nAND\n  p.policy_name = '$policy'\nAND\n  mc.payload -> 'metadata' -> 'labels' ->> '$label' ${value_query:raw}\nAND\n  (ch.compliance = 'non_compliant' OR ch.compliance = 'pending')\nORDER BY (ch.compliance_date) DESC\n",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "value"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "sql": {
                "columns": [
                  {
                    "parameters": [],
                    "type": "function"
                  }
                ],
                "groupBy": [
                  {
                    "property": {
                      "type": "string"
                    },
                    "type": "groupBy"
                  }
                ],
                "limit": 50
              },
              "timeColumn": "time",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Offending Clusters ",
          "transformations": [
            {
              "id": "organize",
              "options": {
                "excludeByName": {},
                "indexByName": {
                  "cloud": 3,
                  "cluster": 2,
                  "policy": 1,
                  "time": 0
                },
                "renameByName": {
                  "chdate": "Time",
                  "cloud": "Cloud",
                  "cluster": "Cluster",
                  "message": "Latest Message",
                  "policy": "Policy",
                  "reason": "Reason",
                  "time": "Time"
                }
              }
            }
          ],
          "type": "table"
        }
      ],
      "refresh": "",
      "schemaVersion": 39,
      "tags": [],
      "templating": {
        "list": [
          {
            "current": {
              "selected": false,
              "text": "Global-Hub-DataSource",
              "value": "P244538DD76A4C61D"
            },
            "hide": 2,
            "includeAll": false,
            "multi": false,
            "name": "datasource",
            "options": [],
            "query": "postgres",
            "queryValue": "",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "type": "datasource"
          },
          {
            "current": {
              "selected": false,
              "text": "mc1",
              "value": "mc1"
            },
            "datasource": {
              "type": "postgres",
              "uid": "P244538DD76A4C61D"
            },
            "definition": "  SELECT DISTINCT leaf_hub_name\n  FROM\n  history.local_compliance ch\n  WHERE\n  $__timeFilter(ch.compliance_date)",
            "description": "Managed hub cluster name",
            "hide": 0,
            "includeAll": false,
            "label": "Hub",
            "multi": false,
            "name": "hub",
            "options": [],
            "query": "  SELECT DISTINCT leaf_hub_name\n  FROM\n  history.local_compliance ch\n  WHERE\n  $__timeFilter(ch.compliance_date)",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {
              "selected": true,
              "text": [
                "All"
              ],
              "value": [
                "$__all"
              ]
            },
            "datasource": {
              "type": "postgres",
              "uid": "P244538DD76A4C61D"
            },
            "definition": "SELECT leaf_hub_name\nFROM status.leaf_hubs\nWHERE cluster_id IN (SELECT cluster_id FROM status.leaf_hubs  WHERE leaf_hub_name = '$hub'  AND cluster_id!='00000000-0000-0000-0000-000000000000')\nUNION\nSELECT '$hub' leaf_hub_name;",
            "hide": 2,
            "includeAll": true,
            "label": "all_hubs",
            "multi": true,
            "name": "all_hubs",
            "options": [],
            "query": "SELECT leaf_hub_name\nFROM status.leaf_hubs\nWHERE cluster_id IN (SELECT cluster_id FROM status.leaf_hubs  WHERE leaf_hub_name = '$hub'  AND cluster_id!='00000000-0000-0000-0000-000000000000')\nUNION\nSELECT '$hub' leaf_hub_name;",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {
              "selected": false,
              "text": "open-cluster-management-global-set",
              "value": "open-cluster-management-global-set"
            },
            "datasource": {
              "type": "postgres",
              "uid": "P244538DD76A4C61D"
            },
            "definition": "WITH compcluster as(\n  SELECT DISTINCT policy_id\n  FROM\n  history.local_compliance lc\n  WHERE\n  $__timeFilter(lc.compliance_date)\n  AND\n  leaf_hub_name  IN ( $all_hubs )\n  AND\n  lc.cluster_id IS NOT NULL\n)\nSELECT\n  p.payload -> 'metadata' ->> 'namespace'\nFROM\n  local_spec.policies p\nINNER JOIN\n  compcluster ch ON p.policy_id = ch.policy_id",
            "description": "policy namespace ",
            "hide": 0,
            "includeAll": false,
            "label": "Namespace",
            "multi": false,
            "name": "namespace",
            "options": [],
            "query": "WITH compcluster as(\n  SELECT DISTINCT policy_id\n  FROM\n  history.local_compliance lc\n  WHERE\n  $__timeFilter(lc.compliance_date)\n  AND\n  leaf_hub_name  IN ( $all_hubs )\n  AND\n  lc.cluster_id IS NOT NULL\n)\nSELECT\n  p.payload -> 'metadata' ->> 'namespace'\nFROM\n  local_spec.policies p\nINNER JOIN\n  compcluster ch ON p.policy_id = ch.policy_id",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {
              "selected": false,
              "text": "po-pending",
              "value": "po-pending"
            },
            "datasource": {
              "type": "postgres",
              "uid": "P244538DD76A4C61D"
            },
            "definition": "WITH compcluster as(\n  SELECT DISTINCT policy_id\n  FROM\n  history.local_compliance lc\n  WHERE\n  $__timeFilter(lc.compliance_date)\n  AND\n  leaf_hub_name  IN ( $all_hubs )\n)\nSELECT\n  policy_name\nFROM\n  local_spec.policies p\nINNER JOIN\n  compcluster ch ON p.policy_id = ch.policy_id\nWHERE\n  p.payload -> 'metadata' ->> 'namespace' = '$namespace'",
            "hide": 0,
            "includeAll": false,
            "label": "Policy",
            "multi": false,
            "name": "policy",
            "options": [],
            "query": "WITH compcluster as(\n  SELECT DISTINCT policy_id\n  FROM\n  history.local_compliance lc\n  WHERE\n  $__timeFilter(lc.compliance_date)\n  AND\n  leaf_hub_name  IN ( $all_hubs )\n)\nSELECT\n  policy_name\nFROM\n  local_spec.policies p\nINNER JOIN\n  compcluster ch ON p.policy_id = ch.policy_id\nWHERE\n  p.payload -> 'metadata' ->> 'namespace' = '$namespace'",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {
              "selected": true,
              "text": [
                "All"
              ],
              "value": [
                "$__all"
              ]
            },
            "datasource": {
              "type": "grafana-postgresql-datasource",
              "uid": "P244538DD76A4C61D"
            },
            "definition": "WITH compcluster as(\n  SELECT DISTINCT policy_id\n  FROM\n  history.local_compliance lc\n  WHERE\n  $__timeFilter(lc.compliance_date)\n  AND\n  leaf_hub_name  IN ( $all_hubs )\n)\nSELECT\n  p.policy_id\nFROM\n  local_spec.policies p\nINNER JOIN\n  compcluster ch ON p.policy_id = ch.policy_id\nWHERE\n  p.payload -> 'metadata' ->> 'namespace' = '$namespace'\nAND p.policy_name = '$policy'",
            "description": "The id of policy",
            "hide": 0,
            "includeAll": true,
            "label": "Policy Id",
            "multi": true,
            "name": "policy_id",
            "options": [],
            "query": "WITH compcluster as(\n  SELECT DISTINCT policy_id\n  FROM\n  history.local_compliance lc\n  WHERE\n  $__timeFilter(lc.compliance_date)\n  AND\n  leaf_hub_name  IN ( $all_hubs )\n)\nSELECT\n  p.policy_id\nFROM\n  local_spec.policies p\nINNER JOIN\n  compcluster ch ON p.policy_id = ch.policy_id\nWHERE\n  p.payload -> 'metadata' ->> 'namespace' = '$namespace'\nAND p.policy_name = '$policy'",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {
              "selected": false,
              "text": "cloud",
              "value": "cloud"
            },
            "datasource": {
              "type": "postgres",
              "uid": "${datasource}"
            },
            "definition": "WITH compcluster as(\n  SELECT DISTINCT cluster_id\n  FROM\n  history.local_compliance ch\n  WHERE\n  $__timeFilter(ch.compliance_date)\n)\nSELECT\n  DISTINCT jsonb_object_keys(payload -> 'metadata' -> 'labels')\nFROM\n  status.managed_clusters mc\nJOIN\n  compcluster ch \nON\n mc.cluster_id = ch.cluster_id",
            "description": "Managed cluster labels",
            "hide": 0,
            "includeAll": false,
            "label": "Label",
            "multi": false,
            "name": "label",
            "options": [],
            "query": "WITH compcluster as(\n  SELECT DISTINCT cluster_id\n  FROM\n  history.local_compliance ch\n  WHERE\n  $__timeFilter(ch.compliance_date)\n)\nSELECT\n  DISTINCT jsonb_object_keys(payload -> 'metadata' -> 'labels')\nFROM\n  status.managed_clusters mc\nJOIN\n  compcluster ch \nON\n mc.cluster_id = ch.cluster_id",
            "refresh": 2,
            "regex": "\\b(?!name\\b)(\\b[a-z]+)",
            "skipUrlSync": false,
            "sort": 5,
            "type": "query"
          },
          {
            "current": {
              "selected": true,
              "text": [
                "All"
              ],
              "value": [
                "$__all"
              ]
            },
            "datasource": {
              "type": "postgres",
              "uid": "${datasource}"
            },
            "definition": "WITH compcluster as(\n  SELECT DISTINCT cluster_id\n  FROM\n  history.local_compliance ch\n  WHERE\n  $__timeFilter(ch.compliance_date)\n)\nSELECT\n  payload -> 'metadata' -> 'labels' ->> '$label'\nFROM\n  status.managed_clusters mc \nJOIN\n  compcluster ch \nON\n mc.cluster_id = ch.cluster_id\nWHERE\n  payload -> 'metadata' -> 'labels' ->> '$label' IS NOT NULL",
            "description": "Managed cluster label values",
            "hide": 0,
            "includeAll": true,
            "label": "Value",
            "multi": true,
            "name": "value",
            "options": [],
            "query": "WITH compcluster as(\n  SELECT DISTINCT cluster_id\n  FROM\n  history.local_compliance ch\n  WHERE\n  $__timeFilter(ch.compliance_date)\n)\nSELECT\n  payload -> 'metadata' -> 'labels' ->> '$label'\nFROM\n  status.managed_clusters mc \nJOIN\n  compcluster ch \nON\n mc.cluster_id = ch.cluster_id\nWHERE\n  payload -> 'metadata' -> 'labels' ->> '$label' IS NOT NULL",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 5,
            "type": "query"
          },
          {
            "current": {
              "selected": false,
              "text": " in ('Amazon') ",
              "value": " in ('Amazon') "
            },
            "datasource": {
              "type": "postgres",
              "uid": "P244538DD76A4C61D"
            },
            "definition": "select case when length($$${value}$$)>0 then $$ in ($value) $$ else ' is null ' end",
            "hide": 2,
            "includeAll": false,
            "multi": false,
            "name": "value_query",
            "options": [],
            "query": "select case when length($$${value}$$)>0 then $$ in ($value) $$ else ' is null ' end",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {
              "selected": false,
              "text": "https://console-openshift-console.apps.obs-hub-of-hubs-aws-414-sno-t55kq.scale.red-chesterfield.com",
              "value": "https://console-openshift-console.apps.obs-hub-of-hubs-aws-414-sno-t55kq.scale.red-chesterfield.com"
            },
            "datasource": {
              "type": "postgres",
              "uid": "P244538DD76A4C61D"
            },
            "definition": "SELECT\n  console_url\nFROM\n  status.leaf_hubs\nWHERE\n  leaf_hub_name = '$hub' AND deleted_at IS NULL",
            "hide": 2,
            "includeAll": false,
            "multi": false,
            "name": "hubConsoleURL",
            "options": [],
            "query": "SELECT\n  console_url\nFROM\n  status.leaf_hubs\nWHERE\n  leaf_hub_name = '$hub' AND deleted_at IS NULL",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {
              "selected": false,
              "text": " in ('27fbdf48-f5c2-4715-9b01-6692dadaad18') ",
              "value": " in ('27fbdf48-f5c2-4715-9b01-6692dadaad18') "
            },
            "datasource": {
              "type": "grafana-postgresql-datasource",
              "uid": "P244538DD76A4C61D"
            },
            "definition": "select case when length($$${policy_id}$$)>0 then $$ in ($policy_id) $$ else ' is null ' end",
            "hide": 2,
            "includeAll": false,
            "multi": false,
            "name": "policy_id_query",
            "options": [],
            "query": "select case when length($$${policy_id}$$)>0 then $$ in ($policy_id) $$ else ' is null ' end",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          }
        ]
      },
      "time": {
        "from": "now-30d",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "utc",
      "title": "Global Hub - Ad Hoc Policy Investigation",
      "uid": "pAqtIGj4k",
      "version": 1,
      "weekStart": ""
    }
kind: ConfigMap
metadata:
  name: grafana-dashboard-acm-global-adhoc-investigation
  namespace: {{.Namespace}}
